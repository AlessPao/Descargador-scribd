#!/usr/bin/env node

/**
 * Script para instalar Chromium en plataformas de despliegue
 * Versi√≥n que no falla el build si Chrome no est√° disponible
 */

import puppeteer from 'puppeteer';
import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';

async function installChrome() {
  try {
    console.log('üîç Verificando instalaci√≥n de Chromium...');
    
    // Primero intentar usar el Chromium incluido con Puppeteer
    let browser;
    try {
      browser = await puppeteer.launch({
        headless: "new",
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--disable-gpu'
        ]
      });
      
      console.log('‚úÖ Chromium instalado y funcionando correctamente');
      await browser.close();
      return;
    } catch (error) {
      console.log('‚ö†Ô∏è Chromium no funciona con configuraci√≥n inicial:', error.message);
      if (browser) {
        try {
          await browser.close();
        } catch (e) {
          // Ignorar errores de cierre
        }
      }
    }
    
    // Buscar instalaciones de Chrome existentes primero
    const possibleChromePaths = [
      '/usr/bin/google-chrome-stable',
      '/usr/bin/google-chrome',
      '/usr/bin/chromium-browser',
      '/usr/bin/chromium',
      '/opt/google/chrome/chrome',
      '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome'
    ];
    
    console.log('üîç Buscando instalaciones de Chrome...');
    for (const chromePath of possibleChromePaths) {
      if (fs.existsSync(chromePath)) {
        console.log(`‚úÖ Encontrado Chrome en: ${chromePath}`);
        // Intentar usar esta instalaci√≥n
        try {
          const testBrowser = await puppeteer.launch({
            headless: "new",
            executablePath: chromePath,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
          });
          await testBrowser.close();
          console.log('‚úÖ Chrome externo verificado correctamente');
          console.log(`üí° Chrome funcional encontrado en: ${chromePath}`);
          return;
        } catch (error) {
          console.log(`‚ùå Chrome en ${chromePath} no funciona:`, error.message);
        }
      }
    }
    
    // Si no se encuentra Chrome, intentar instalarlo
    console.log('üîÑ Intentando instalar Chromium...');
    
    const installCommands = [
      'npx puppeteer install',
      'npx @puppeteer/browsers install chrome@stable --platform=linux',
      'npm install puppeteer --no-save'
    ];
    
    for (const cmd of installCommands) {
      try {
        console.log(`üì¶ Ejecutando: ${cmd}`);
        execSync(cmd, { stdio: 'pipe', timeout: 180000 }); // 3 minutos timeout
        console.log('‚úÖ Comando ejecutado exitosamente');
        
        // Verificar que funciona despu√©s de la instalaci√≥n
        const testBrowser = await puppeteer.launch({
          headless: "new",
          args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        await testBrowser.close();
        console.log('‚úÖ Chromium instalado y verificado correctamente');
        return;
      } catch (installError) {
        console.error(`‚ùå Error con comando ${cmd}:`, installError.message);
      }
    }
    
    // Si nada funciona, mostrar informaci√≥n de diagn√≥stico pero NO fallar el build
    console.log('üîç Informaci√≥n de diagn√≥stico:');
    console.log('Node version:', process.version);
    console.log('Platform:', process.platform);
    console.log('Architecture:', process.arch);
    console.log('NODE_ENV:', process.env.NODE_ENV);
    console.log('PUPPETEER_SKIP_CHROMIUM_DOWNLOAD:', process.env.PUPPETEER_SKIP_CHROMIUM_DOWNLOAD);
    
    console.log('‚ö†Ô∏è No se pudo instalar Chrome, pero la aplicaci√≥n continuar√° con servicios alternativos');
    console.log('ÔøΩ La aplicaci√≥n usar√° autom√°ticamente el servicio de scraping ligero cuando sea necesario');
    console.log('üöÄ Build continuar√° sin fallar...');
    
    // NO hacer process.exit(1) para no fallar el build
    console.log('‚úÖ Script de instalaci√≥n completado (modo fallback)');
    
  } catch (error) {
    console.error('‚ùå Error general:', error.message);
    console.log('‚ö†Ô∏è Error en instalaci√≥n de Chrome, pero build continuar√°');
    console.log('üí° La aplicaci√≥n usar√° servicios alternativos');
    // NO hacer process.exit(1) para no fallar el build
  }
}

// Ejecutar la instalaci√≥n
installChrome().catch(error => {
  console.error('‚ùå Error ejecutando instalaci√≥n:', error.message);
  console.log('‚ö†Ô∏è Build continuar√° sin Chrome (modo fallback)');
  // NO hacer process.exit(1)
});
